import { Requirement } from 'src/domain/entities/requirements.entity';
export class RequirementPresenter {
  static toHTTP(requirement: Requirement) {
    return {
      idReqVisto: requirement.id_req_visto,
      projectId: requirement.id_projet_fk,
      economicActivityId: requirement.id_ativ_econ_fk,
      requirementSituationId: requirement.id_sitc_req_fk,
      buildingTypeId: requirement.id_tipo_edifi_fk,
      propertyTypeId: requirement.id_tipo_patrm_fk,
      occupationRiskId: requirement.id_risc_ocup_fk,
      occupationSubTypeId: requirement.id_sub_tipo_ocup_fk,
      occupationTypeId: requirement.id_tipo_ocup_fk,
      userId: requirement.id_usu_fk,
      personIndicator: requirement.ic_pess,
      cpf: requirement.nr_cpf,
      personName: requirement.nm_pess,
      cnpj: requirement.nr_cnpj,
      corporateName: requirement.nm_razao_socl,
      establishmentTitle: requirement.ds_titul_estab,
      arTypeIndicator: requirement.ic_tipo_ar,
      validityStartDate: requirement.dt_ini_valid,
      validityEndDate: requirement.dt_fim_valid,
      phoneNumber: requirement.nr_telef,
      cellPhoneNumber: requirement.nr_celr,
      email: requirement.ds_email,
      propertyArea: requirement.nr_area_patrm,
      declaredArea: requirement.nr_area_decld,
      maxCapacity: requirement.nr_cap_max_pess,
      paymentFee: requirement.vl_taxa_pgto,
      floorCount: requirement.nr_pavm,
      buildingHeight: requirement.nr_alt_edf,
      hasGnv: requirement.ic_gnv,
      hasFixedSystem: requirement.ic_sist_fixo,
      hasExplosiveMaterial: requirement.ic_mat_expl,
      tpeiExemptionReasonId: requirement.id_motiv_isent_tpei_fk,
      arObservation: requirement.ds_obs_ar,
      observations: requirement.ds_obs,
      statusIndicator: requirement.ic_stat,
      inclusionDate: requirement.dt_incl,
      updateDate: requirement.dt_atlz,
      protocolId: requirement.id_protc_fk,
      taxExemptionReasonId: requirement.id_motiv_isent_tax_fk,
      isCondominium: requirement.ic_condm,
      isCondominiumEstablished: requirement.ic_esta_condm,
      addressObservation: requirement.ds_obs_endr,
      cityOmeId: requirement.id_cidd_x_ome_fk,
      addressReference: requirement.ds_refer_endr,
      isGasResale: requirement.ic_reven_gas,
      isGasStation: requirement.ic_posto_combs,
      temporaryEventTypeId: requirement.id_tp_event_temp_fk,
      temporaryEventTypeOther: requirement.ds_tp_event_temp_outro,
      occupationId: requirement.id_ocupc_fk,
      stampDate: requirement.dt_emiss_avbc,
      avcbSituationIndicator: requirement.ic_sitc_avcb,
      projectProtocolNumber: requirement.nr_protc_projt,
      gasBottleQuantity: requirement.nr_qtd_botij,
      eventOpenIndicator: requirement.ic_event_abert,
      latitude: requirement.nr_latd,
      longitude: requirement.nr_long,
      form: requirement.ic_forma,
      hasPurchaseTerm: requirement.ic_termo_compr,
      purchaseTermObservation: requirement.ds_obs_termo,
      purchaseTermValidityDate: requirement.dt_valid_termo,
      avcbOpinion: requirement.parecer_avcb,
      condominiumProtocolNumber: requirement.nr_protc_condm,
    };
  }

  static toHTTPList(requirements: Requirement[]) {
    return requirements.map((requirement) => this.toHTTP(requirement));
  }
}
